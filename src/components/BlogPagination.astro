---
interface Props {
  currentPage: number;
  totalPages: number;
  postsPerPage: number;
  totalPosts: number;
  baseUrl: string;
  searchQuery?: string;
  category?: string;
}

const { 
  currentPage, 
  totalPages, 
  postsPerPage, 
  totalPosts,
  baseUrl,
  searchQuery,
  category 
} = Astro.props;

// Generate page numbers to show
const getPageNumbers = () => {
  const delta = 2;
  const range = [];
  const rangeWithDots = [];

  for (let i = Math.max(2, currentPage - delta); 
       i <= Math.min(totalPages - 1, currentPage + delta); 
       i++) {
    range.push(i);
  }

  if (currentPage - delta > 2) {
    rangeWithDots.push(1, '...');
  } else {
    rangeWithDots.push(1);
  }

  rangeWithDots.push(...range);

  if (currentPage + delta < totalPages - 1) {
    rangeWithDots.push('...', totalPages);
  } else {
    rangeWithDots.push(totalPages);
  }

  return rangeWithDots;
};

const buildUrl = (page: number, perPage?: number) => {
  const params = new URLSearchParams();

  if (page > 1) params.set('page', page.toString());
  if (perPage && perPage !== 10) params.set('per_page', perPage.toString());
  if (searchQuery) params.set('search', searchQuery);
  if (category) params.set('category', category);

  const queryString = params.toString();
  return queryString ? `${baseUrl}?${queryString}` : baseUrl;
};

const pageNumbers = totalPages > 1 ? getPageNumbers() : [];
---

<div class="mt-12 space-y-6">
  <!-- Posts per page selector -->
  <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
    <div class="flex items-center space-x-2 text-sm text-charcoal-600">
      <span>Show:</span>
      <select 
        id="posts-per-page" 
        class="border border-secondary-300 rounded-md px-3 py-1 text-charcoal-700 focus:outline-none focus:ring-2 focus:ring-primary-400"
        onchange="window.location.href = this.options[this.selectedIndex].dataset.url"
      >
        <option value="5" data-url={buildUrl(1, 5)} selected={postsPerPage === 5}>5 posts</option>
        <option value="10" data-url={buildUrl(1, 10)} selected={postsPerPage === 10}>10 posts</option>
        <option value="25" data-url={buildUrl(1, 25)} selected={postsPerPage === 25}>25 posts</option>
        <option value="all" data-url={buildUrl(1, 999)} selected={postsPerPage >= 999}>All posts</option>
      </select>
    </div>

    <div class="text-sm text-charcoal-600">
      Showing {((currentPage - 1) * postsPerPage) + 1} to {Math.min(currentPage * postsPerPage, totalPosts)} of {totalPosts} posts
    </div>
  </div>

  <!-- Pagination Navigation -->
  {totalPages > 1 && (
    <nav class="flex items-center justify-center" aria-label="Blog pagination">
      <div class="flex items-center space-x-1">
        <!-- Previous Button -->
        {currentPage > 1 ? (
          <a
            href={buildUrl(currentPage - 1)}
            class="px-3 py-2 text-sm font-medium text-charcoal-500 bg-white border border-secondary-300 rounded-l-md hover:bg-secondary-50 hover:text-charcoal-700 transition-colors"
            aria-label="Previous page"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </a>
        ) : (
          <span class="px-3 py-2 text-sm font-medium text-charcoal-300 bg-secondary-50 border border-secondary-300 rounded-l-md cursor-not-allowed">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </span>
        )}

        <!-- Page Numbers -->
        {pageNumbers.map((pageNum) => {
          if (pageNum === '...') {
            return (
              <span class="px-3 py-2 text-sm font-medium text-charcoal-500 bg-white border-t border-b border-secondary-300">
                ...
              </span>
            );
          }

          if (pageNum === currentPage) {
            return (
              <span class="px-3 py-2 text-sm font-medium text-white bg-primary-600 border border-primary-600">
                {pageNum}
              </span>
            );
          }

          return (
            <a
              href={buildUrl(pageNum as number)}
              class="px-3 py-2 text-sm font-medium text-charcoal-500 bg-white border-t border-b border-secondary-300 hover:bg-secondary-50 hover:text-charcoal-700 transition-colors"
            >
              {pageNum}
            </a>
          );
        })}

        <!-- Next Button -->
        {currentPage < totalPages ? (
          <a
            href={buildUrl(currentPage + 1)}
            class="px-3 py-2 text-sm font-medium text-charcoal-500 bg-white border border-secondary-300 rounded-r-md hover:bg-secondary-50 hover:text-charcoal-700 transition-colors"
            aria-label="Next page"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </a>
        ) : (
          <span class="px-3 py-2 text-sm font-medium text-charcoal-300 bg-secondary-50 border border-secondary-300 rounded-r-md cursor-not-allowed">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </span>
        )}
      </div>
    </nav>
  )}
</div>

<style>
  /* Ensure proper mobile spacing */
  @media (max-width: 640px) {
    nav .flex {
      flex-wrap: wrap;
      justify-content: center;
    }

    nav a, nav span {
      min-width: 40px;
      text-align: center;
    }
  }
</style>