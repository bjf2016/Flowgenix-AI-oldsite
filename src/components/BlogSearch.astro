---
interface Props {
  searchQuery?: string;
  selectedCategory?: string;
  categories: Array<{
    _id: string;
    title: string;
    slug: { current: string };
  }>;
  totalResults?: number;
}

const { searchQuery = '', selectedCategory = '', categories = [], totalResults } = Astro.props;
---

<div class="mb-8 space-y-6">
  <!-- Search Bar -->
  <div class="relative max-w-2xl mx-auto">
    <form method="GET" action="/blog" class="relative">
      <input
        type="text"
        name="search"
        value={searchQuery}
        placeholder="Search articles..."
        class="w-full px-4 py-3 pl-12 pr-16 text-charcoal-700 bg-white border border-secondary-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-primary-400 focus:border-transparent"
      />

      <!-- Search Icon -->
      <div class="absolute inset-y-0 left-0 flex items-center pl-4">
        <svg class="w-5 h-5 text-charcoal-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>

      <!-- Hidden category field to maintain category filter during search -->
      {selectedCategory && (
        <input type="hidden" name="category" value={selectedCategory} />
      )}

      <!-- Search Button -->
      <button
        type="submit"
        class="absolute inset-y-0 right-0 flex items-center pr-4"
      >
        <span class="px-3 py-1 text-sm font-medium text-primary-600 bg-primary-50 rounded-lg hover:bg-primary-100 transition-colors">
          Search
        </span>
      </button>
    </form>

    <!-- Clear Search -->
    {searchQuery && (
      <div class="absolute top-full left-0 right-0 mt-2">
        <div class="flex items-center justify-between bg-primary-50 border border-primary-200 rounded-lg px-4 py-2">
          <span class="text-sm text-primary-700">
            {totalResults ? `${totalResults} results for "${searchQuery}"` : `Searching for "${searchQuery}"`}
          </span>
          <a
            href={selectedCategory ? `/blog?category=${selectedCategory}` : '/blog'}
            class="text-sm text-primary-600 hover:text-primary-800 font-medium"
          >
            Clear search
          </a>
        </div>
      </div>
    )}
  </div>

  <!-- Category Filters -->
  {categories.length > 0 && (
    <div class="text-center">
      <h3 class="text-lg font-semibold text-charcoal-900 mb-4">Browse by Category</h3>
      <div class="flex flex-wrap justify-center gap-3">
        <!-- All Posts -->
        <a 
          href={searchQuery ? `/blog?search=${encodeURIComponent(searchQuery)}` : '/blog'}
          class={`px-4 py-2 rounded-full transition-colors ${
            !selectedCategory 
              ? 'bg-primary-600 text-white' 
              : 'bg-secondary-100 text-charcoal-700 hover:bg-secondary-200'
          }`}
        >
          All Posts
        </a>

        <!-- Category Buttons -->
        {categories.map((category) => (
          <a 
            href={searchQuery 
              ? `/blog?search=${encodeURIComponent(searchQuery)}&category=${category.slug.current}`
              : `/blog?category=${category.slug.current}`
            }
            class={`px-4 py-2 rounded-full transition-colors ${
              selectedCategory === category.slug.current
                ? 'bg-primary-600 text-white' 
                : 'bg-secondary-100 text-charcoal-700 hover:bg-secondary-200'
            }`}
          >
            {category.title}
          </a>
        ))}
      </div>
    </div>
  )}

  <!-- Active Filters Display -->
  {(searchQuery || selectedCategory) && (
    <div class="flex flex-wrap gap-2 justify-center">
      <span class="text-sm text-charcoal-600">Active filters:</span>

      {searchQuery && (
        <span class="inline-flex items-center px-3 py-1 rounded-full text-sm bg-blue-100 text-blue-800">
          Search: "{searchQuery}"
          <a
            href={selectedCategory ? `/blog?category=${selectedCategory}` : '/blog'}
            class="ml-2 text-blue-600 hover:text-blue-800"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </a>
        </span>
      )}

      {selectedCategory && (
        <span class="inline-flex items-center px-3 py-1 rounded-full text-sm bg-green-100 text-green-800">
          Category: {categories.find(c => c.slug.current === selectedCategory)?.title || selectedCategory}
          <a
            href={searchQuery ? `/blog?search=${encodeURIComponent(searchQuery)}` : '/blog'}
            class="ml-2 text-green-600 hover:text-green-800"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </a>
        </span>
      )}

      {(searchQuery || selectedCategory) && (
        <a
          href="/blog"
          class="inline-flex items-center px-3 py-1 rounded-full text-sm bg-red-100 text-red-800 hover:bg-red-200"
        >
          Clear all filters
          <svg class="ml-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </a>
      )}
    </div>
  )}
</div>

<style>
  /* Enhanced focus styles for better accessibility */
  input:focus {
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  /* Smooth transitions for interactive elements */
  a, button {
    transition: all 0.2s ease-in-out;
  }

  /* Mobile responsiveness */
  @media (max-width: 640px) {
    .flex-wrap {
      justify-content: center;
    }

    input {
      font-size: 16px; /* Prevents zoom on iOS */
    }
  }
</style>